#!/usr/bin/env node

/**
 * Script completo de setup e teste
 * Executa seed do banco e depois smoke tests
 */

const { seedDatabase } = require('./seed-prisma');
const { runAllTests } = require('./smoke-tests');

async function setupAndTest() {
  console.log('üöÄ INICIANDO SETUP COMPLETO E TESTES');
  console.log('='.repeat(60));
  
  try {
    // 1. Executar seed do banco
    console.log('\nüìù ETAPA 1: Carregando seeds.json no Postgres...');
    await seedDatabase();
    console.log('‚úÖ Seeds carregados com sucesso!');
    
    // Aguardar um pouco para o banco processar
    console.log('\n‚è≥ Aguardando processamento do banco...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. Executar smoke tests
    console.log('\nüß™ ETAPA 2: Executando smoke tests...');
    const testsPassed = await runAllTests();
    
    // 3. Resumo final
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESUMO FINAL DO SETUP E TESTES');
    console.log('='.repeat(60));
    
    if (testsPassed) {
      console.log('üéâ SUCESSO TOTAL!');
      console.log('‚úÖ Seeds carregados no Postgres');
      console.log('‚úÖ Todos os smoke tests passaram');
      console.log('üöÄ Sistema est√° funcionando perfeitamente');
      console.log('\nüìã Pr√≥ximos passos:');
      console.log('   ‚Ä¢ Acesse http://localhost:3000 para ver a aplica√ß√£o');
      console.log('   ‚Ä¢ Use /admin/dashboard para gerenciar a barbearia');
      console.log('   ‚Ä¢ Use /admin/super-admin para gerenciar tenants');
      console.log('   ‚Ä¢ Execute "npm run smoke:test" para rodar testes novamente');
    } else {
      console.log('‚ùå ALGUNS TESTES FALHARAM');
      console.log('‚úÖ Seeds carregados no Postgres');
      console.log('üîç Verifique os logs acima para identificar problemas');
      console.log('üîÑ Execute "npm run smoke:test" para rodar testes novamente');
    }
    
    return testsPassed;
    
  } catch (error) {
    console.error('\nüí• ERRO FATAL DURANTE SETUP:', error.message);
    console.error('üîç Verifique se:');
    console.error('   ‚Ä¢ O banco PostgreSQL est√° rodando');
    console.error('   ‚Ä¢ As vari√°veis de ambiente est√£o configuradas');
    console.error('   ‚Ä¢ O Prisma est√° configurado corretamente');
    return false;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupAndTest()
    .then((success) => {
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error('‚ùå Erro fatal:', error);
      process.exit(1);
    });
}

module.exports = { setupAndTest };
