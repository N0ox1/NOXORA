#!/usr/bin/env node

/**
 * Script para verificar sincroniza√ß√£o entre local e produ√ß√£o
 * Evita dessincroniza√ß√£o entre ambiente local e Vercel
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üîÑ Verificando sincroniza√ß√£o local ‚Üî produ√ß√£o...\n');

try {
  // 1. Verificar se h√° mudan√ßas n√£o commitadas
  const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
  
  if (gitStatus.trim()) {
    console.log('‚ö†Ô∏è  Mudan√ßas n√£o commitadas encontradas:');
    console.log(gitStatus);
    console.log('üí° Execute: git add . && git commit -m "sync changes" && git push');
    process.exit(1);
  }

  // 2. Verificar se est√° na branch main
  const currentBranch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
  
  if (currentBranch !== 'main') {
    console.log(`‚ö†Ô∏è  Branch atual: ${currentBranch}`);
    console.log('üí° Execute: git checkout main');
    process.exit(1);
  }

  // 3. Verificar se est√° atualizado com origin
  execSync('git fetch origin', { stdio: 'pipe' });
  
  const localCommit = execSync('git rev-parse HEAD', { encoding: 'utf8' }).trim();
  const remoteCommit = execSync('git rev-parse origin/main', { encoding: 'utf8' }).trim();
  
  if (localCommit !== remoteCommit) {
    console.log('‚ö†Ô∏è  Local n√£o est√° sincronizado com origin/main');
    console.log('üí° Execute: git pull origin main');
    process.exit(1);
  }

  // 4. Verificar arquivos cr√≠ticos
  const criticalFiles = [
    'src/app/page.tsx',
    'src/components/logo.tsx',
    'next.config.js',
    'package.json'
  ];

  for (const file of criticalFiles) {
    if (!fs.existsSync(file)) {
      console.log(`‚ùå Arquivo cr√≠tico ausente: ${file}`);
      process.exit(1);
    }
  }

  console.log('‚úÖ Sincroniza√ß√£o OK!');
  console.log('üöÄ Ambiente local est√° alinhado com produ√ß√£o');
  
} catch (error) {
  console.error('‚ùå Erro na verifica√ß√£o:', error.message);
  process.exit(1);
}
